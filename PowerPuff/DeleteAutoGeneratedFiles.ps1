$autoFiles = "[Dd]ebug", "[Rr]elease", "[Bb]in", "[Oo]bj", "build", "ipch", "x64", ".*\.sdf", ".*\.sdf"

$dirsToDelete = New-Object System.Collections.ArrayList
$filesToDelete = New-Object System.Collections.ArrayList

function ExploreDirectoriesAndFiles($path = $pwd.Path) 
{
    foreach ($item in Get-ChildItem -LiteralPath $path -Directory)
    {
        if (IsAutoGeneratedFile($item.Name))
        {
            [void] $Script:dirsToDelete.Add($item)
            continue;
        }

        # Check if this directory has directories or files that need to be removed.
        ExploreDirectoriesAndFiles($item.FullName);
    }

    foreach ($item in Get-ChildItem -LiteralPath $path -File)
    {
        if (IsAutoGeneratedFile($item.Name))
        {
            [void] $Script:filesToDelete.Add($item)
            continue;
        }
    }
}

function IsAutoGeneratedFile($fileName)
{
    foreach ($pattern in $autoFiles)
    {
        if ($fileName -cmatch ("^" + $pattern + "$"))
        {
            return $true
        }
    }
    return $false
}

function AskDeleteConfirmation()
{
    # Just for future reference: How to concatenate a string-array/strings-array.
    #Write-Host ($dirsToDelete -join "`r`n")

    Write-Host "Directories to delete:";
    $totalFiles = 0;
    foreach ($file in $dirsToDelete)
    {
        $count = $file.GetFiles().Count;
        $totalFiles += $count;
        Write-Host $file.FullName, "(", $count.ToString(), " files )"
    }
    Write-Host "Total:", $totalFiles, "files"
    Write-Host ""

    Write-Host "Files to delete:"
    $totalLength = 0
    foreach ($file in $filesToDelete)
    {
        $totalLength += $file.Length
        Write-Host $file.FullName, "(", (PrettifyLength($file.Length)), ")"
    }
    Write-Host "Total:", (PrettifyLength($totalLength))
    Write-Host ""

    $title = "Delete Files"
    $message = "Do you want to delete " + $dirsToDelete.Count + " directories and " + $filesToDelete.Count + " files?"

    $yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", "Deletes the directories and files permanently."
    $no = New-Object System.Management.Automation.Host.ChoiceDescription "&No", "Keep the directories and files."

    $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)

    return $host.ui.PromptForChoice($title, $message, $options, 1) 
}

function PrettifyLength($length)
{
    if ($length -gt 1GB)
    {
        return ($length / 1GB).ToString() + " GB";
    }
    elseif ($length -gt 1MB)
    {
        return ($length / 1MB).ToString() + " MB";
    }
    elseif ($length -gt 1KB)
    {
        return ($length / 1KB).ToString() + " KB";
    }
        
    return $length.ToString() + " B";
}

function MoveDirectoriesAndFilesToRecycleBin() 
{
    $shell = new-object -comobject "Shell.Application"

    foreach ($file in $dirsToDelete)
    {
        if ($file.Parent -ne $null)
        {
            Write-Host "Bye!", $file.FullName

            $folder = $shell.Namespace($file.Parent.FullName)
            $item = $folder.ParseName($file.Name)
            $item.InvokeVerb("delete")
        }
    }

    foreach ($file in $filesToDelete)
    {
        Write-Host "Bye!", $file.FullName

        $folder = $shell.Namespace($file.DirectoryName)
        $item = $folder.ParseName($file.Name)
        $item.InvokeVerb("delete")
    }
}

# Start here.
ExploreDirectoriesAndFiles($pwd.Path)

switch (AskDeleteConfirmation)
{
    0 {
        "You selected Yes."
        MoveDirectoriesAndFilesToRecycleBin
    }
    1 {
        "You selected No."
    }
}
    
